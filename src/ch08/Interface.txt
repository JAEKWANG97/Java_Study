인터페이스는 사전적인 의미로 두 장치를 연결하는 접속기를말한다.

객체 A가 인터페이스의 메소드를 호출하면 인터페이스는 객체 B의 메소드를 호출하고 그 결과를 받아 객체  A로 전달해준다.

객체 A,B,C 가 있다고 가정하자.

객체 A가 인터페이스의 메소드를 호출하면 실제로 실행되는 것은
인터페이스 뒤편의 객체 B 또는 객체 C 의 메소드이다.

만약 갹체 B의 메소드 실행 결과와 객체 C의 메소드 실행 결과가 다르다면,
객체 A는 객체 교체로 인해 다른 결과를 얻게 된다.

8.2 인터페이스와 구현 클래스 선언
인터페이스는 ~.java 형태의 소스 파일로 작성되고 ~.class 형태로 컴ㅁ파일 되기 때문에 물리적 형태는 클래스와 동일하다.

인터페이스 선언은 class 키워드 대신 interface 키워드를 사용한다.

8.3 상수 필드
인터페이스는 public static fianl 특성을 갖는 불변의 상수 필드를 멤버로 가질 수 있다.

인터페이스에 선언된 필드는 모두 public static final 특성을 갖기 때문에
publiv static final을 생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.

8.4 추상 메소드
인터페이스는 구현 클래스가 재정의해야 하는 public 추상 메소드를 멤버로 가질 수 있다.
추상 메소드는 리턴타입, 메소드명, 매개변수만 기술되고 중괄호 {}를 붙이지 않는 메소드를 말한다.

구현 클래스에서 추상 메소드를 재정의할 때 주의할 점은
인터페이스의 추상 멤소드는 기본적으로 public 접근 제한을 갖기 때문에
public보다 더 낮은 접근 제한으로 재정의 할 수 없다.
그래서 재정의되는 메소드는 모두 public이 추가되어 있다.

8.5 디폴트 메소드
인터페이스에는 완전한 실행 코드를 가진 디폴트 메소드를 선언할 수 있다. 추상 메소드는 실행부가 없지만
티폴트 메소드는 실행부가 있음.
선언 방법은 클래스 메소드와 동일한데, 차이점은 default 키워드가 리턴 타입 앞에 붙는다.

구현 클래스는 디폴트 메소드를 재정의해서 자신에게 맞게 수정할 수 있다.
재정의 시 주의할 점은 public 접근 제한자를 반드시 붙여야하고, default 키워드를 생략해야한다.

8.6 정적 메소드
인터페이스에는 정적 메소드도 선언이 가능하다. 추상 메소드와 디폴트 메소드는 구현 객체가 필요하지만
정적 메소드는 구현 객체가 없어도 인터페이스만으로 호출할 수 있다.

정적 메소드의 실행부를 작성할 떄 주의할 점은
상수 필드를 제외한 추상 메소드, 디폴트 메소드, private 메소드 등을 호출할 수 없다는 것이다.
이 메소드는 구현 객체가 인스턴스 메소드이기 때문이다.

8.7 private 메소드

인터페이스의 상수필드, 추상메소드, 디폴트 메소드, 정적 메소드는 모두 public 접근 제한을 갖는다.
인터페이스가 외부에서 접근할 수 없는 private 메소드 선언도 가능하다.

private 메소드는 디폴트 메소드 안에서만 호출이 가능한 반면
private 정적 메소드는 디폴트 메소드뿐만 아니라 정적 메소드 안에서도 호출이 가능하다.

private 메소드의 용도는 디폴트와 정적 메소드들의 중복 코드를 줄이기 위함이다.

8.8 다중 인터페이스 구현

구현 객체는 여러개의 인터페이스를 implements 할 수 있다. 구현 객체가 인터페이스 A와 인터페이스 B를 구현하고 있다면,
각각의 인터페이스를 통해 구현 객체를 사용할 수 있다.

구현 객체가 어떤 인터페이스 변수에 대입되느냐에 따라 변수를 통해 호출할 수 있는 추상 메소드가 결정된다.

8.9 인터페이스 상속
인터페이스도 다른 인터페이스를 상속할 수 있다.
다중속성을 허용한다.

자식 인터페이스의 구현 클래스는 자식 인터페이스의 메소드 뿐만 아니라 부모 인터페이스의 모든 추상 메소드를 재정의 해야한다.
그리고 구현 객체는 다음과 같이 자식 및 부모 인터페이스 변수에 대입될 수 있다.

구현 객체가 자식 인터페이스 변수에 대입되면 자식 및 부모 인터페이스의 추상 메소드를 모두 호출할 수 있으나,
부모 인터페이스 변수에 대입되면 부모 인터페이스에 선언된 추상 메서드만 호출 가능하다.

8.10 타입 변환

자동타입 변환

인터페이스의 타입 변환은 인터페이스와 구현 클래스간에 발생한다.
인터페이스 변수에 구현 객체를 대입하면 구현 객체는 인터페이스 타입으로 자동 타입 변환된다.
반대로 인터페이스 타입을 구현 클래스 타입으로 변환 시킬 수 있는데, 이때는 강제 타입 변환이 필하다.

강제 타입 변환
강제 타입 변환은 캐스팅 기호를 사용해서 인터페이스 타입을 구현 클래스 타입으로 변환 시키는 것을 말한다.

구현 객체가 인터페이스 타입으로 자동 변환 되면, 인터페이스에 선언된 메소드만 사용 가능하다.

8.11 다형성

현업에서는 상속보다는 인터페이스를 통해서 다형성을 구현하는 경우가 많다.
다형성이란 사용 방법은 동일하지만 다양한 결과가 나오는 성질을 말한다.

상속의 다형성과 마찬가지로 인터페이스 역시 다형성을 구현하기 위해 재정의와 자동 타입변환 기능을 이용한다.

인터페이스의 추상 메소드는 구현 클래스에서 재정의를 해야하며, 재정의 되는 내용은 구현 클래스마다 다르다.

