9.1 중첩 클래스
객체 지향 프로그램에서는 클래스 간에 서로 긴밀한 관계를 맺고 상호작용한다.
클래스가 여러 클래스와 관계를 맺는 경우에는 독립적으로 선언하는 것이 좋으나,

특정 클래스만 관계를 맺는 경우에는 중첩 클래스로 선언하는 것이 유지보수에 도움이 되는 경우가 많다.

중첩 클래스란 클래스 내부에 선언한 클래스를 말한다.
중첩 클래스를 사용하면 클래스의 멤버를 쉽게 사용할 수 있고 외부에는 중첩 관계 클래스를 감춤으로써 코드의 복잡성을줄일 수 있다는 장점이 있다.

중첩 클래스는 선언하는 위치에 따라 두 가지로 분류된다.
클래스의 멤버로서 선언되는 중첩 클래스를 멤버 클래스라고 하고, 메소드 내부에서 선언되는 중첩 클래스를 로컬 클래스라고 한다.

9.2 인스턴스 멤버 클래스

인스턴스 멤버 클래스는 다음과 같이 A 클래스의 멤버로 선언된 B 클래스를 말한다.

public class A {
    [public | private] class B{
    // 인스턴스 멤버 클래스
    }
}

접근 제한자에 따른 인스턴스 멤버 클래스의 접근 범위는 다음과 같다.

구분                  접근 범위
public class B {} | 다른 패키지에서 B 클래스를 사용할 수 있다.
class B {}        | 같은 패키지에서만 B 클래스를 사용할 수 있다.
private class B {}| A 클래스 내부에서만 B 클래스를 사용할 수 있다.

9.3 정적 멤버 클래스
정적 멤버 클래스는 다음과 같이 static 키워드와 함께 A 클래스의 멤버로 선언된 B 클래스를 말한다.

public statc class B{} : 다른 패키지에서 B 클래스를 사용할 수 있음
static class B {} : 같은 패키지에서만 B 클래스를 사용할 수 있음.
private static class B {} : A클래스 내부에서만 B 클래스를 사용할 수 있음.

9.4 로컬 클래스
생성자 또는 메소드 내부에서 다음과 같이 선언된 클래스를 로컬 클래스라고 함
public class A {
    public A(){
        class B {}
    }

    public void method(){
        class B {}
    }
}

로컬 클래스는 생성자와 메소드가 실행될 동안에만 객체를 생성할 수 있다.

로컬 변수를 로컬 클래스에서 사용할 경우 로컬 변수는 final 특성을 갖게 되므로 값을 읽을 수만 있고
수정할 수 없게 된다. 이것은 로컬 클래스 내부에서 값을 변경하지 못하도록 제한하기 때문이다.

9.5 바깥 멤버 접근

중첩 클래스는 바깥 클래스와 긴밀한 관계를 맺으면서 바깥 클래스의 멤버에 접근할 수 있다.
하지만 중첩 클래스가 어떻게 선언되었느냐에 따라 접근 제한이 있을 수 있다.

바깥 클래스의 멤버 접근 제한

정적 멤버 클래스 내부에서는 바깥 클래스의 필드와 메소드를 사용헐 때 제한이 따른다.

인스턴스 멤버 클래스 : 바깥 클래스의 모든 필드와 메소드
정적 멤버 클래스 : 바깥 클래스의 정적 필드와 정적 메소드

바깥 클래스의 객체 접근
중첩 클래스 내부에서 this는 해당 중첩 클래스의 객체를 말한다.
만약 중첩 클래스 내부에서 바깥 클래스의 객체를 얻으려면 바깥 클래스 이름에 this를 붙여주면 된다.

ex) 바깥클래스이름.this --> 바깥 객체

중첩 클래스와 바깥 클래스가 동일한 이름의 인스턴스 필드와 메소드를 가지고 있을 경우,
바깥 객체 소속의 필드와 메소드 사용방법 똑같다.

9.6 중첩 인터페이스

중첩 인터페이스는 클래스의 멤버로 선언된 인터페이스를 말한다.
인터페이스를 클래스 내부에 선언하는 이유는 해당 클래스와 긴말한 관계를 맺는 구현 객체를 만들기 위해서다.

public : 인터페이스에 외부의 접근을 막지 않으려면
private : A클래스 내부에서만 사용하려면
default : 접근제한자를 붙이지 않으면 같은 패키지 안에서만 접근 가능


***
A객체 없이 B인터페이스를 사용할 수 있도록 하기 위해 static 을 추가할 수 있음

중첩 인터페이스는 안드로이드와 같은 UI 프로그램에서 이벤트를 처리할 목적으로 많이 활용된다.
예를 들어 버튼을 클릭했을 떄 이벤트를 처리할 객체는 중첩 인터페이스 를 구현해서 만든다.
***

9.7 익명객체

익명 객체는 이름이 없는 객체를 말함
명시적으로 클래스를 선언하지 않기 때문에 쉽게 객체를 생성할 수 있다는 장점이 있음

익명 객체는 필드값, 로컬 변수값, 매개변수값 으로 주로 사용됨

익명 객체는 클래스를 상속하거나 인터페이스를 구현해야만 생성 가능함.
클래스를 상속해서 만들 경우 익명 자식 객체.
인터페이스를 구현해서 만들 경우 익명 구현 객체.

익명 자식 객체

익명 자식 객체는 부모클래스를 상속받아 생성됨
생성된 객체는 부몬타입의 필드, 로컬 변수, 매개변수의 값으로 대입할 수 있음
주로 부모 메소드를 재정의하는 코드가 옴

